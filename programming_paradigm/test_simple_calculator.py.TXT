import unittest
from simple_calculator import SimpleCalculator

class TestSimpleCalculator(unittest.TestCase):
    """
    Test suite for the SimpleCalculator class.
    Each test method covers a specific operation or edge case.
    """

    def setUp(self):
        """
        Set up the SimpleCalculator instance before each test method.
        This ensures that each test starts with a fresh calculator object,
        preventing test interactions.
        """
        self.calc = SimpleCalculator()

    def test_addition_positive_numbers(self):
        """Test addition with two positive integers."""
        self.assertEqual(self.calc.add(2, 3), 5)
        self.assertEqual(self.calc.add(10, 20), 30)

    def test_addition_negative_numbers(self):
        """Test addition with two negative integers."""
        self.assertEqual(self.calc.add(-1, -1), -2)
        self.assertEqual(self.calc.add(-10, -5), -15)

    def test_addition_mixed_numbers(self):
        """Test addition with positive and negative integers."""
        self.assertEqual(self.calc.add(-1, 1), 0)
        self.assertEqual(self.calc.add(5, -3), 2)
        self.assertEqual(self.calc.add(-8, 3), -5)

    def test_addition_zero(self):
        """Test addition involving zero."""
        self.assertEqual(self.calc.add(0, 5), 5)
        self.assertEqual(self.calc.add(5, 0), 5)
        self.assertEqual(self.calc.add(0, 0), 0)

    def test_addition_floats(self):
        """Test addition with floating-point numbers."""
        self.assertEqual(self.calc.add(2.5, 3.5), 6.0)
        self.assertEqual(self.calc.add(-1.5, 2.5), 1.0)
        self.assertAlmostEqual(self.calc.add(0.1, 0.2), 0.3) # Use assertAlmostEqual for floats

    def test_subtract_positive_numbers(self):
        """Test subtraction with positive integers."""
        self.assertEqual(self.calc.subtract(5, 2), 3)
        self.assertEqual(self.calc.subtract(10, 10), 0)

    def test_subtract_negative_numbers(self):
        """Test subtraction with negative integers."""
        self.assertEqual(self.calc.subtract(-5, -2), -3)
        self.assertEqual(self.calc.subtract(-2, -5), 3)

    def test_subtract_mixed_numbers(self):
        """Test subtraction with positive and negative integers."""
        self.assertEqual(self.calc.subtract(5, -2), 7)
        self.assertEqual(self.calc.subtract(-5, 2), -7)

    def test_subtract_zero(self):
        """Test subtraction involving zero."""
        self.assertEqual(self.calc.subtract(5, 0), 5)
        self.assertEqual(self.calc.subtract(0, 5), -5)
        self.assertEqual(self.calc.subtract(0, 0), 0)

    def test_subtract_floats(self):
        """Test subtraction with floating-point numbers."""
        self.assertEqual(self.calc.subtract(7.5, 2.5), 5.0)
        self.assertAlmostEqual(self.calc.subtract(0.3, 0.1), 0.2)

    def test_multiply_positive_numbers(self):
        """Test multiplication with positive integers."""
        self.assertEqual(self.calc.multiply(2, 3), 6)
        self.assertEqual(self.calc.multiply(10, 5), 50)

    def test_multiply_negative_numbers(self):
        """Test multiplication with negative integers."""
        self.assertEqual(self.calc.multiply(-2, -3), 6)
        self.assertEqual(self.calc.multiply(-5, -10), 50)

    def test_multiply_mixed_numbers(self):
        """Test multiplication with positive and negative integers."""
        self.assertEqual(self.calc.multiply(-2, 3), -6)
        self.assertEqual(self.calc.multiply(5, -1), -5)

    def test_multiply_by_zero(self):
        """Test multiplication by zero."""
        self.assertEqual(self.calc.multiply(10, 0), 0)
        self.assertEqual(self.calc.multiply(0, 5), 0)
        self.assertEqual(self.calc.multiply(-7, 0), 0)

    def test_multiply_floats(self):
        """Test multiplication with floating-point numbers."""
        self.assertEqual(self.calc.multiply(2.5, 2), 5.0)
        self.assertEqual(self.calc.multiply(0.5, 0.5), 0.25)

    def test_divide_normal_cases(self):
        """Test division with normal, non-zero denominators."""
        self.assertEqual(self.calc.divide(10, 2), 5.0)
        self.assertEqual(self.calc.divide(7, 2), 3.5)
        self.assertEqual(self.calc.divide(-10, 5), -2.0)
        self.assertEqual(self.calc.divide(0, 5), 0.0) # Division of zero by non-zero

    def test_divide_by_zero(self):
        """Test division where the denominator is zero, expecting None."""
        self.assertIsNone(self.calc.divide(10, 0))
        self.assertIsNone(self.calc.divide(-5, 0))
        self.assertIsNone(self.calc.divide(0, 0)) # Even 0/0 should be None as per method

    def test_divide_floats(self):
        """Test division with floating-point numbers."""
        self.assertAlmostEqual(self.calc.divide(5.0, 2.0), 2.5)
        self.assertAlmostEqual(self.calc.divide(1.0, 3.0), 0.3333333333333333)


if __name__ == '__main__':
    unittest.main()
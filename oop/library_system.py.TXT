class Book:
    def __init__(self, title, author):
        """
        Base class for a book.
        """
        self.title = title
        self.author = author

    def get_details(self):
        return f"Book: {self.title} by {self.author}"


class EBook(Book):
    def __init__(self, title, author, file_size):
        """
        Derived class for an EBook, inheriting from Book.
        """
        super().__init__(title, author)  # Call the base class constructor
        self.file_size = file_size

    def get_details(self):
        return f"EBook: {self.title} by {self.author}, File Size: {self.file_size}KB"


class PrintBook(Book):
    def __init__(self, title, author, page_count):
        """
        Derived class for a PrintBook, inheriting from Book.
        """
        super().__init__(title, author)  # Call the base class constructor
        self.page_count = page_count

    def get_details(self):
        return f"PrintBook: {self.title} by {self.author}, Page Count: {self.page_count}"


class Library:
    def __init__(self):
        """
        Class representing a Library, demonstrating composition.
        It contains a list of various book types.
        """
        self.books = []

    def add_book(self, book):
        """
        Adds a book (Book, EBook, or PrintBook instance) to the library.
        """
        if isinstance(book, Book):  # Ensure it's a Book or a subclass of Book
            self.books.append(book)
            print(f"Added '{book.title}' to the library.")
        else:
            print("Invalid object. Only Book instances can be added.")

    def list_books(self):
        """
        Prints details of each book in the library.
        """
        if not self.books:
            print("The library is empty.")
            return

        print("\nBooks in the Library:")
        for book in self.books:
            print(book.get_details())